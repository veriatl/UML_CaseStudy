helper context UML!AcceptCallAction def: result_pins(): Boolean = 
  UML!AcceptCallAction.allInstances()->forAll(aca |
    // We don't understand ocl expression LetExp
; 

helper context UML!AcceptCallAction def: trigger_call_event(): Boolean = 
  UML!AcceptCallAction.allInstances()->forAll(aca |
    name:
    self:
    type:self : Actions::AcceptCallAction[1]
    size	
    
    =	
    
    and	
    
; 

helper context UML!AcceptCallAction def: unmarshall(): Boolean = 
  UML!AcceptCallAction.allInstances()->forAll(aca |
    name:
    self:
    type:self : Actions::AcceptCallAction[1]
    =	
    
; 

helper context UML!AcceptEventAction def: one_output_pin(): Boolean = 
  UML!AcceptEventAction.allInstances()->forAll(aea |
    name:
    self:isUnmarshall
    type:self : Actions::AcceptEventAction[1]
    not	
    
    and	
    
    implies	
    
; 

helper context UML!AcceptEventAction def: no_input_pins(): Boolean = 
  UML!AcceptEventAction.allInstances()->forAll(aea |
    name:
    self:
    type:self : Actions::AcceptEventAction[1]
    size	
    
    =	
    
; 

helper context UML!AcceptEventAction def: no_output_pins(): Boolean = 
  UML!AcceptEventAction.allInstances()->forAll(aea |
    oclIsTypeOf	
    
    and	
    
    implies	
    
; 

helper context UML!AcceptEventAction def: unmarshall_signal_events(): Boolean = 
  UML!AcceptEventAction.allInstances()->forAll(aea |
    name:
    self:isUnmarshall
    type:self : Actions::AcceptEventAction[1]
    and	
    
    implies	
    
; 

helper context UML!AcceptEventAction def: conforming_type(): Boolean = 
  UML!AcceptEventAction.allInstances()->forAll(aea |
    name:
    self:isUnmarshall
    type:self : Actions::AcceptEventAction[1]
    not	
    
    implies	
    
; 

helper context UML!ActionInputPin def: input_pin(): Boolean = 
  UML!ActionInputPin.allInstances()->forAll(aip |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ActionInputPin def: one_output_pin(): Boolean = 
  UML!ActionInputPin.allInstances()->forAll(aip |
    name:
    self:
    type:
    size	
    
    =	
    
; 

helper context UML!ActionInputPin def: no_control_or_object_flow(): Boolean = 
  UML!ActionInputPin.allInstances()->forAll(aip |
    name:
    self:
    type:
    
    isEmpty	
    
    and	
    
    and	
    
; 

helper context UML!AddStructuralFeatureValueAction def: required_value(): Boolean = 
  UML!AddStructuralFeatureValueAction.allInstances()->forAll(asfva |
    name:
    self:
    type:self : Actions::AddStructuralFeatureValueAction[1]
    <>	
    
; 

helper context UML!AddStructuralFeatureValueAction def: insertAt_pin(): Boolean = 
  UML!AddStructuralFeatureValueAction.allInstances()->forAll(asfva |
    // We don't understand ocl expression IfExp
; 

helper context UML!AddVariableValueAction def: required_value(): Boolean = 
  UML!AddVariableValueAction.allInstances()->forAll(avva |
    name:
    self:
    type:self : Actions::AddVariableValueAction[1]
    <>	
    
; 

helper context UML!AddVariableValueAction def: insertAt_pin(): Boolean = 
  UML!AddVariableValueAction.allInstances()->forAll(avva |
    // We don't understand ocl expression IfExp
; 

helper context UML!BroadcastSignalAction def: number_of_arguments(): Boolean = 
  UML!BroadcastSignalAction.allInstances()->forAll(bsa |
    name:
    self:
    type:self : Actions::BroadcastSignalAction[1]
    size	
    
    =	
    
; 

helper context UML!BroadcastSignalAction def: type_ordering_multiplicity(): Boolean = 
  UML!BroadcastSignalAction.allInstances()->forAll(bsa |
    // We don't understand ocl expression LetExp
; 

helper context UML!BroadcastSignalAction def: no_onport(): Boolean = 
  UML!BroadcastSignalAction.allInstances()->forAll(bsa |
    name:
    self:
    type:self : Actions::BroadcastSignalAction[1]
    =	
    
; 

helper context UML!CallAction def: argument_pins(): Boolean = 
  UML!CallAction.allInstances()->forAll(ca |
    // We don't understand ocl expression LetExp
; 

helper context UML!CallAction def: result_pins(): Boolean = 
  UML!CallAction.allInstances()->forAll(ca |
    // We don't understand ocl expression LetExp
; 

helper context UML!CallAction def: synchronous_call(): Boolean = 
  UML!CallAction.allInstances()->forAll(ca |
    name:
    self:
    type:self : Actions::CallAction[1]
    notEmpty	
    
    implies	
    
; 

helper context UML!CallBehaviorAction def: no_onport(): Boolean = 
  UML!CallBehaviorAction.allInstances()->forAll(cba |
    name:
    self:
    type:self : Actions::CallBehaviorAction[1]
    =	
    
; 

helper context UML!CallOperationAction def: type_target_pin(): Boolean = 
  UML!CallOperationAction.allInstances()->forAll(coa |
    // We don't understand ocl expression IfExp
; 

helper context UML!Clause def: body_output_pins(): Boolean = 
  UML!Clause.allInstances()->forAll(c |
    // We don't understand ocl expression IteratorExp
    includesAll	
    
; 

helper context UML!Clause def: decider_output(): Boolean = 
  UML!Clause.allInstances()->forAll(c |
    // We don't understand ocl expression IteratorExp
    includes	
    
    and	
    
    and	
    
; 

helper context UML!Clause def: test_and_body(): Boolean = 
  UML!Clause.allInstances()->forAll(c |
    name:
    self:
    type:self : Actions::Clause[1]
    intersection	
    
    isEmpty	
    
; 

helper context UML!ClearAssociationAction def: multiplicity(): Boolean = 
  UML!ClearAssociationAction.allInstances()->forAll(caa |
    name:
    self:
    type:self : Actions::ClearAssociationAction[1]
    
; 

helper context UML!ClearAssociationAction def: same_type(): Boolean = 
  UML!ClearAssociationAction.allInstances()->forAll(caa |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ClearStructuralFeatureAction def: type_of_result(): Boolean = 
  UML!ClearStructuralFeatureAction.allInstances()->forAll(csfa |
    name:
    self:
    type:self : Actions::ClearStructuralFeatureAction[1]
    <>	
    
    implies	
    
; 

helper context UML!ClearStructuralFeatureAction def: multiplicity_of_result(): Boolean = 
  UML!ClearStructuralFeatureAction.allInstances()->forAll(csfa |
    name:
    self:
    type:self : Actions::ClearStructuralFeatureAction[1]
    <>	
    
    implies	
    
; 

helper context UML!ConditionalNode def: result_no_incoming(): Boolean = 
  UML!ConditionalNode.allInstances()->forAll(cn |
    // We don't understand ocl expression IteratorExp
    isEmpty	
    
; 

helper context UML!ConditionalNode def: no_input_pins(): Boolean = 
  UML!ConditionalNode.allInstances()->forAll(cn |
    name:
    self:
    type:self : Actions::ConditionalNode[1]
    isEmpty	
    
; 

helper context UML!ConditionalNode def: one_clause_with_executable_node(): Boolean = 
  UML!ConditionalNode.allInstances()->forAll(cn |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ConditionalNode def: matching_output_pins(): Boolean = 
  UML!ConditionalNode.allInstances()->forAll(cn |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ConditionalNode def: executable_nodes(): Boolean = 
  UML!ConditionalNode.allInstances()->forAll(cn |
    // We don't understand ocl expression IteratorExp
    
    =	
    
; 

helper context UML!ConditionalNode def: clause_no_predecessor(): Boolean = 
  UML!ConditionalNode.allInstances()->forAll(cn |
    // We don't understand ocl expression IteratorExp
    intersection	
    
    isEmpty	
    
; 

helper context UML!CreateLinkAction def: association_not_abstract(): Boolean = 
  UML!CreateLinkAction.allInstances()->forAll(cla |
    name:
    self:
    type:
    
; 

helper context UML!CreateLinkObjectAction def: multiplicity(): Boolean = 
  UML!CreateLinkObjectAction.allInstances()->forAll(cloa |
    name:
    self:
    type:self : Actions::CreateLinkObjectAction[1]
    
; 

helper context UML!CreateLinkObjectAction def: type_of_result(): Boolean = 
  UML!CreateLinkObjectAction.allInstances()->forAll(cloa |
    name:
    self:
    type:
    =	
    
; 

helper context UML!CreateLinkObjectAction def: association_class(): Boolean = 
  UML!CreateLinkObjectAction.allInstances()->forAll(cloa |
    
    oclIsKindOf	
    
; 

helper context UML!CreateObjectAction def: classifier_not_abstract(): Boolean = 
  UML!CreateObjectAction.allInstances()->forAll(coa |
    name:
    self:
    type:
    not	
    
; 

helper context UML!CreateObjectAction def: multiplicity(): Boolean = 
  UML!CreateObjectAction.allInstances()->forAll(coa |
    name:
    self:
    type:self : Actions::CreateObjectAction[1]
    
; 

helper context UML!CreateObjectAction def: classifier_not_association_class(): Boolean = 
  UML!CreateObjectAction.allInstances()->forAll(coa |
    name:
    self:
    type:self : Actions::CreateObjectAction[1]
    oclIsKindOf	
    
    not	
    
; 

helper context UML!CreateObjectAction def: same_type(): Boolean = 
  UML!CreateObjectAction.allInstances()->forAll(coa |
    name:
    self:
    type:
    =	
    
; 

helper context UML!DestroyObjectAction def: multiplicity(): Boolean = 
  UML!DestroyObjectAction.allInstances()->forAll(doa |
    name:
    self:
    type:self : Actions::DestroyObjectAction[1]
    
; 

helper context UML!DestroyObjectAction def: no_type(): Boolean = 
  UML!DestroyObjectAction.allInstances()->forAll(doa |
    name:
    self:
    type:
    =	
    
; 

helper context UML!ExpansionNode def: region_as_input_or_output(): Boolean = 
  UML!ExpansionNode.allInstances()->forAll(en |
    name:
    self:
    type:self : Actions::ExpansionNode[1]
    oclAsSet	
    
    notEmpty	
    
    xor	
    
; 

helper context UML!InputPin def: outgoing_edges_structured_only(): Boolean = 
  UML!InputPin.allInstances()->forAll(ip |
    name:
    self:
    type:self : Actions::InputPin[1]
    notEmpty	
    
    implies	
    
; 

helper context UML!LinkAction def: same_pins(): Boolean = 
  UML!LinkAction.allInstances()->forAll(la |
    name:
    self:
    type:self : Actions::LinkAction[1]
    asBag	
    
    =	
    
; 

helper context UML!LinkAction def: same_association(): Boolean = 
  UML!LinkAction.allInstances()->forAll(la |
    // We don't understand ocl expression IteratorExp
    =	
    
; 

helper context UML!LinkAction def: not_static(): Boolean = 
  UML!LinkAction.allInstances()->forAll(la |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!LinkEndCreationData def: insertAt_pin(): Boolean = 
  UML!LinkEndCreationData.allInstances()->forAll(lecd |
    // We don't understand ocl expression IfExp
; 

helper context UML!LinkEndData def: same_type(): Boolean = 
  UML!LinkEndData.allInstances()->forAll(led |
    name:
    self:
    type:self : Actions::LinkEndData[1]
    <>	
    
    implies	
    
; 

helper context UML!LinkEndData def: multiplicity(): Boolean = 
  UML!LinkEndData.allInstances()->forAll(led |
    name:
    self:
    type:self : Actions::LinkEndData[1]
    <>	
    
    implies	
    
; 

helper context UML!LinkEndData def: end_object_input_pin(): Boolean = 
  UML!LinkEndData.allInstances()->forAll(led |
    name:
    self:
    type:self : Actions::LinkEndData[1]
    oclAsSet	
    
    excludesAll	
    
; 

helper context UML!LinkEndData def: property_is_association_end(): Boolean = 
  UML!LinkEndData.allInstances()->forAll(led |
    name:
    self:
    type:
    <>	
    
; 

helper context UML!LinkEndData def: qualifiers(): Boolean = 
  UML!LinkEndData.allInstances()->forAll(led |
    name:
    self:
    type:
    includesAll	
    
; 

helper context UML!LinkEndDestructionData def: destroyAt_pin(): Boolean = 
  UML!LinkEndDestructionData.allInstances()->forAll(ledd |
    // We don't understand ocl expression IfExp
; 

helper context UML!LoopNode def: result_no_incoming(): Boolean = 
  UML!LoopNode.allInstances()->forAll(ln |
    // We don't understand ocl expression IteratorExp
    isEmpty	
    
; 

helper context UML!LoopNode def: input_edges(): Boolean = 
  UML!LoopNode.allInstances()->forAll(ln |
    // We don't understand ocl expression IteratorExp
    isEmpty	
    
; 

helper context UML!LoopNode def: executable_nodes(): Boolean = 
  UML!LoopNode.allInstances()->forAll(ln |
    name:
    self:
    type:self : Actions::LoopNode[1]
    
    
    =	
    
; 

helper context UML!LoopNode def: body_output_pins(): Boolean = 
  UML!LoopNode.allInstances()->forAll(ln |
    // We don't understand ocl expression IteratorExp
    includesAll	
    
; 

helper context UML!LoopNode def: setup_test_and_body(): Boolean = 
  UML!LoopNode.allInstances()->forAll(ln |
    name:
    self:
    type:self : Actions::LoopNode[1]
    intersection	
    
    isEmpty	
    
    and	
    
    and	
    
; 

helper context UML!LoopNode def: matching_output_pins(): Boolean = 
  UML!LoopNode.allInstances()->forAll(ln |
    name:
    self:
    type:self : Actions::LoopNode[1]
    size	
    
    =	
    
    and	
    
; 

helper context UML!LoopNode def: matching_loop_variables(): Boolean = 
  UML!LoopNode.allInstances()->forAll(ln |
    name:
    self:
    type:self : Actions::LoopNode[1]
    size	
    
    =	
    
    and	
    
    and	
    
    and	
    
    and	
    
; 

helper context UML!LoopNode def: matching_result_pins(): Boolean = 
  UML!LoopNode.allInstances()->forAll(ln |
    name:
    self:
    type:self : Actions::LoopNode[1]
    size	
    
    =	
    
    and	
    
    and	
    
    and	
    
    and	
    
; 

helper context UML!LoopNode def: loop_variable_outgoing(): Boolean = 
  UML!LoopNode.allInstances()->forAll(ln |
    
    oclAsSet	
    
    includesAll	
    
; 

helper context UML!OpaqueAction def: language_body_size(): Boolean = 
  UML!OpaqueAction.allInstances()->forAll(oa |
    name:
    self:
    type:self : Actions::OpaqueAction[1]
    notEmpty	
    
    implies	
    
; 

helper context UML!OutputPin def: incoming_edges_structured_only(): Boolean = 
  UML!OutputPin.allInstances()->forAll(op |
    name:
    self:
    type:self : Actions::OutputPin[1]
    notEmpty	
    
    implies	
    
; 

helper context UML!Pin def: control_pins(): Boolean = 
  UML!Pin.allInstances()->forAll(p |
    name:
    self:isControl
    type:self : Actions::Pin[1]
    implies	
    
; 

helper context UML!Pin def: not_unique(): Boolean = 
  UML!Pin.allInstances()->forAll(p |
    name:
    self:
    type:self : Actions::Pin[1]
    not	
    
; 

helper context UML!QualifierValue def: multiplicity_of_qualifier(): Boolean = 
  UML!QualifierValue.allInstances()->forAll(qv |
    name:
    self:
    type:self : Actions::QualifierValue[1]
    
; 

helper context UML!QualifierValue def: type_of_qualifier(): Boolean = 
  UML!QualifierValue.allInstances()->forAll(qv |
    name:
    self:
    type:
    
; 

helper context UML!QualifierValue def: qualifier_attribute(): Boolean = 
  UML!QualifierValue.allInstances()->forAll(qv |
    name:
    self:
    type:
    includes	
    
; 

helper context UML!ReadExtentAction def: type_is_classifier(): Boolean = 
  UML!ReadExtentAction.allInstances()->forAll(rea |
    name:
    self:
    type:
    =	
    
; 

helper context UML!ReadExtentAction def: multiplicity_of_result(): Boolean = 
  UML!ReadExtentAction.allInstances()->forAll(rea |
    name:
    self:
    type:self : Actions::ReadExtentAction[1]
    
; 

helper context UML!ReadIsClassifiedObjectAction def: no_type(): Boolean = 
  UML!ReadIsClassifiedObjectAction.allInstances()->forAll(ricoa |
    name:
    self:
    type:
    =	
    
; 

helper context UML!ReadIsClassifiedObjectAction def: multiplicity_of_output(): Boolean = 
  UML!ReadIsClassifiedObjectAction.allInstances()->forAll(ricoa |
    name:
    self:
    type:self : Actions::ReadIsClassifiedObjectAction[1]
    
; 

helper context UML!ReadIsClassifiedObjectAction def: boolean_result(): Boolean = 
  UML!ReadIsClassifiedObjectAction.allInstances()->forAll(ricoa |
    name:
    self:
    type:
    =	
    
; 

helper context UML!ReadIsClassifiedObjectAction def: multiplicity_of_input(): Boolean = 
  UML!ReadIsClassifiedObjectAction.allInstances()->forAll(ricoa |
    name:
    self:
    type:self : Actions::ReadIsClassifiedObjectAction[1]
    
; 

helper context UML!ReadLinkAction def: type_and_ordering(): Boolean = 
  UML!ReadLinkAction.allInstances()->forAll(rla |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ReadLinkAction def: compatible_multiplicity(): Boolean = 
  UML!ReadLinkAction.allInstances()->forAll(rla |
    openEnd	
    
    first	
    
    
; 

helper context UML!ReadLinkAction def: visibility(): Boolean = 
  UML!ReadLinkAction.allInstances()->forAll(rla |
    // We don't understand ocl expression LetExp
; 

helper context UML!ReadLinkAction def: one_open_end(): Boolean = 
  UML!ReadLinkAction.allInstances()->forAll(rla |
    openEnd	
    
    size	
    
    =	
    
; 

helper context UML!ReadLinkAction def: navigable_open_end(): Boolean = 
  UML!ReadLinkAction.allInstances()->forAll(rla |
    openEnd	
    
    first	
    
    
; 

helper context UML!ReadLinkObjectEndAction def: property(): Boolean = 
  UML!ReadLinkObjectEndAction.allInstances()->forAll(rloea |
    name:
    self:
    type:
    <>	
    
; 

helper context UML!ReadLinkObjectEndAction def: multiplicity_of_object(): Boolean = 
  UML!ReadLinkObjectEndAction.allInstances()->forAll(rloea |
    name:
    self:
    type:self : Actions::ReadLinkObjectEndAction[1]
    
; 

helper context UML!ReadLinkObjectEndAction def: ends_of_association(): Boolean = 
  UML!ReadLinkObjectEndAction.allInstances()->forAll(rloea |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ReadLinkObjectEndAction def: type_of_result(): Boolean = 
  UML!ReadLinkObjectEndAction.allInstances()->forAll(rloea |
    name:
    self:
    type:
    =	
    
; 

helper context UML!ReadLinkObjectEndAction def: multiplicity_of_result(): Boolean = 
  UML!ReadLinkObjectEndAction.allInstances()->forAll(rloea |
    name:
    self:
    type:self : Actions::ReadLinkObjectEndAction[1]
    
; 

helper context UML!ReadLinkObjectEndAction def: type_of_object(): Boolean = 
  UML!ReadLinkObjectEndAction.allInstances()->forAll(rloea |
    name:
    self:
    type:
    =	
    
; 

helper context UML!ReadLinkObjectEndAction def: association_of_association(): Boolean = 
  UML!ReadLinkObjectEndAction.allInstances()->forAll(rloea |
    name:
    self:
    type:
    oclIsKindOf	
    
; 

helper context UML!ReadLinkObjectEndQualifierAction def: multiplicity_of_object(): Boolean = 
  UML!ReadLinkObjectEndQualifierAction.allInstances()->forAll(rloeqa |
    name:
    self:
    type:self : Actions::ReadLinkObjectEndQualifierAction[1]
    
; 

helper context UML!ReadLinkObjectEndQualifierAction def: type_of_object(): Boolean = 
  UML!ReadLinkObjectEndQualifierAction.allInstances()->forAll(rloeqa |
    name:
    self:
    type:
    =	
    
; 

helper context UML!ReadLinkObjectEndQualifierAction def: multiplicity_of_qualifier(): Boolean = 
  UML!ReadLinkObjectEndQualifierAction.allInstances()->forAll(rloeqa |
    name:
    self:
    type:self : Actions::ReadLinkObjectEndQualifierAction[1]
    
; 

helper context UML!ReadLinkObjectEndQualifierAction def: ends_of_association(): Boolean = 
  UML!ReadLinkObjectEndQualifierAction.allInstances()->forAll(rloeqa |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ReadLinkObjectEndQualifierAction def: multiplicity_of_result(): Boolean = 
  UML!ReadLinkObjectEndQualifierAction.allInstances()->forAll(rloeqa |
    name:
    self:
    type:self : Actions::ReadLinkObjectEndQualifierAction[1]
    
; 

helper context UML!ReadLinkObjectEndQualifierAction def: same_type(): Boolean = 
  UML!ReadLinkObjectEndQualifierAction.allInstances()->forAll(rloeqa |
    name:
    self:
    type:
    =	
    
; 

helper context UML!ReadLinkObjectEndQualifierAction def: association_of_association(): Boolean = 
  UML!ReadLinkObjectEndQualifierAction.allInstances()->forAll(rloeqa |
    name:
    self:
    type:
    oclIsKindOf	
    
; 

helper context UML!ReadLinkObjectEndQualifierAction def: qualifier_attribute(): Boolean = 
  UML!ReadLinkObjectEndQualifierAction.allInstances()->forAll(rloeqa |
    name:
    self:
    type:
    <>	
    
; 

helper context UML!ReadSelfAction def: contained(): Boolean = 
  UML!ReadSelfAction.allInstances()->forAll(rsa |
    name:
    self:
    type:self : Actions::ReadSelfAction[1]
    <>	
    
; 

helper context UML!ReadSelfAction def: multiplicity(): Boolean = 
  UML!ReadSelfAction.allInstances()->forAll(rsa |
    name:
    self:
    type:self : Actions::ReadSelfAction[1]
    
; 

helper context UML!ReadSelfAction def: not_static(): Boolean = 
  UML!ReadSelfAction.allInstances()->forAll(rsa |
    // We don't understand ocl expression LetExp
; 

helper context UML!ReadSelfAction def: type(): Boolean = 
  UML!ReadSelfAction.allInstances()->forAll(rsa |
    name:
    self:
    type:
    =	
    
; 

helper context UML!ReadStructuralFeatureAction def: multiplicity(): Boolean = 
  UML!ReadStructuralFeatureAction.allInstances()->forAll(rsfa |
    name:
    self:
    type:self : Actions::ReadStructuralFeatureAction[1]
    
; 

helper context UML!ReadStructuralFeatureAction def: type_and_ordering(): Boolean = 
  UML!ReadStructuralFeatureAction.allInstances()->forAll(rsfa |
    name:
    self:
    type:
    =	
    
    and	
    
; 

helper context UML!ReadVariableAction def: type_and_ordering(): Boolean = 
  UML!ReadVariableAction.allInstances()->forAll(rva |
    name:
    self:
    type:
    =	
    
    and	
    
; 

helper context UML!ReadVariableAction def: compatible_multiplicity(): Boolean = 
  UML!ReadVariableAction.allInstances()->forAll(rva |
    name:
    self:
    type:self : Actions::ReadVariableAction[1]
    
; 

helper context UML!ReclassifyObjectAction def: input_pin(): Boolean = 
  UML!ReclassifyObjectAction.allInstances()->forAll(roa |
    name:
    self:
    type:
    =	
    
; 

helper context UML!ReclassifyObjectAction def: classifier_not_abstract(): Boolean = 
  UML!ReclassifyObjectAction.allInstances()->forAll(roa |
    // We don't understand ocl expression IteratorExp
    not	
    
; 

helper context UML!ReclassifyObjectAction def: multiplicity(): Boolean = 
  UML!ReclassifyObjectAction.allInstances()->forAll(roa |
    name:
    self:
    type:self : Actions::ReclassifyObjectAction[1]
    
; 

helper context UML!ReduceAction def: reducer_inputs_output(): Boolean = 
  UML!ReduceAction.allInstances()->forAll(ra |
    // We don't understand ocl expression LetExp
; 

helper context UML!ReduceAction def: input_type_is_collection(): Boolean = 
  UML!ReduceAction.allInstances()->forAll(ra |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!ReduceAction def: output_types_are_compatible(): Boolean = 
  UML!ReduceAction.allInstances()->forAll(ra |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!RemoveStructuralFeatureValueAction def: removeAt_and_value(): Boolean = 
  UML!RemoveStructuralFeatureValueAction.allInstances()->forAll(rsfva |
    // We don't understand ocl expression IfExp
; 

helper context UML!RemoveVariableValueAction def: removeAt_and_value(): Boolean = 
  UML!RemoveVariableValueAction.allInstances()->forAll(rvva |
    // We don't understand ocl expression IfExp
; 

helper context UML!ReplyAction def: pins_match_parameter(): Boolean = 
  UML!ReplyAction.allInstances()->forAll(ra |
    // We don't understand ocl expression LetExp
; 

helper context UML!ReplyAction def: event_on_reply_to_call_trigger(): Boolean = 
  UML!ReplyAction.allInstances()->forAll(ra |
    name:
    self:
    type:
    oclIsKindOf	
    
; 

helper context UML!SendObjectAction def: type_target_pin(): Boolean = 
  UML!SendObjectAction.allInstances()->forAll(soa |
    name:
    self:
    type:self : Actions::SendObjectAction[1]
    <>	
    
    implies	
    
; 

helper context UML!SendSignalAction def: type_ordering_multiplicity(): Boolean = 
  UML!SendSignalAction.allInstances()->forAll(ssa |
    // We don't understand ocl expression LetExp
; 

helper context UML!SendSignalAction def: number_order(): Boolean = 
  UML!SendSignalAction.allInstances()->forAll(ssa |
    name:
    self:
    type:self : Actions::SendSignalAction[1]
    size	
    
    =	
    
; 

helper context UML!SendSignalAction def: type_target_pin(): Boolean = 
  UML!SendSignalAction.allInstances()->forAll(ssa |
    name:
    self:
    type:self : Actions::SendSignalAction[1]
    oclAsSet	
    
    isEmpty	
    
    not	
    
    implies	
    
; 

helper context UML!StartClassifierBehaviorAction def: multiplicity(): Boolean = 
  UML!StartClassifierBehaviorAction.allInstances()->forAll(scba |
    name:
    self:
    type:self : Actions::StartClassifierBehaviorAction[1]
    
; 

helper context UML!StartClassifierBehaviorAction def: type_has_classifier(): Boolean = 
  UML!StartClassifierBehaviorAction.allInstances()->forAll(scba |
    name:
    self:
    type:
    oclAsSet	
    
    notEmpty	
    
    implies	
    
; 

helper context UML!StartObjectBehaviorAction def: multiplicity_of_object(): Boolean = 
  UML!StartObjectBehaviorAction.allInstances()->forAll(soba |
    name:
    self:
    type:self : Actions::StartObjectBehaviorAction[1]
    
; 

helper context UML!StartObjectBehaviorAction def: type_of_object(): Boolean = 
  UML!StartObjectBehaviorAction.allInstances()->forAll(soba |
    behavior	
    
    <>	
    
; 

helper context UML!StartObjectBehaviorAction def: no_onport(): Boolean = 
  UML!StartObjectBehaviorAction.allInstances()->forAll(soba |
    name:
    self:
    type:self : Actions::StartObjectBehaviorAction[1]
    oclAsSet	
    
    isEmpty	
    
; 

helper context UML!StructuralFeatureAction def: multiplicity(): Boolean = 
  UML!StructuralFeatureAction.allInstances()->forAll(sfa |
    name:
    self:
    type:self : Actions::StructuralFeatureAction[1]
    
; 

helper context UML!StructuralFeatureAction def: object_type(): Boolean = 
  UML!StructuralFeatureAction.allInstances()->forAll(sfa |
    name:
    self:
    type:
    oclAsType	
    
    
    includes	
    
    or	
    
; 

helper context UML!StructuralFeatureAction def: visibility(): Boolean = 
  UML!StructuralFeatureAction.allInstances()->forAll(sfa |
    name:
    self:
    type:
    =	
    
    or	
    
    or	
    
; 

helper context UML!StructuralFeatureAction def: not_static(): Boolean = 
  UML!StructuralFeatureAction.allInstances()->forAll(sfa |
    name:
    self:
    type:
    not	
    
; 

helper context UML!StructuralFeatureAction def: one_featuring_classifier(): Boolean = 
  UML!StructuralFeatureAction.allInstances()->forAll(sfa |
    name:
    self:
    type:
    oclAsSet	
    
    size	
    
    =	
    
; 

helper context UML!StructuredActivityNode def: output_pin_edges(): Boolean = 
  UML!StructuredActivityNode.allInstances()->forAll(san |
    // We don't understand ocl expression IteratorExp
    excludesAll	
    
; 

helper context UML!StructuredActivityNode def: edges(): Boolean = 
  UML!StructuredActivityNode.allInstances()->forAll(san |
    name:
    self:
    type:self : Actions::StructuredActivityNode[1]
    =	
    
; 

helper context UML!StructuredActivityNode def: input_pin_edges(): Boolean = 
  UML!StructuredActivityNode.allInstances()->forAll(san |
    // We don't understand ocl expression IteratorExp
    excludesAll	
    
; 

helper context UML!TestIdentityAction def: multiplicity(): Boolean = 
  UML!TestIdentityAction.allInstances()->forAll(tia |
    name:
    self:
    type:self : Actions::TestIdentityAction[1]
    
    and	
    
; 

helper context UML!TestIdentityAction def: no_type(): Boolean = 
  UML!TestIdentityAction.allInstances()->forAll(tia |
    name:
    self:
    type:
    =	
    
    and	
    
; 

helper context UML!TestIdentityAction def: result_is_boolean(): Boolean = 
  UML!TestIdentityAction.allInstances()->forAll(tia |
    name:
    self:
    type:
    =	
    
; 

helper context UML!UnmarshallAction def: structural_feature(): Boolean = 
  UML!UnmarshallAction.allInstances()->forAll(ua |
    name:
    self:
    type:self : Actions::UnmarshallAction[1]
    
    size	
    
    >=	
    
; 

helper context UML!UnmarshallAction def: number_of_result(): Boolean = 
  UML!UnmarshallAction.allInstances()->forAll(ua |
    name:
    self:
    type:self : Actions::UnmarshallAction[1]
    
    size	
    
    =	
    
; 

helper context UML!UnmarshallAction def: type_ordering_and_multiplicity(): Boolean = 
  UML!UnmarshallAction.allInstances()->forAll(ua |
    // We don't understand ocl expression LetExp
; 

helper context UML!UnmarshallAction def: multiplicity_of_object(): Boolean = 
  UML!UnmarshallAction.allInstances()->forAll(ua |
    name:
    self:
    type:self : Actions::UnmarshallAction[1]
    
; 

helper context UML!UnmarshallAction def: object_type(): Boolean = 
  UML!UnmarshallAction.allInstances()->forAll(ua |
    name:
    self:
    type:
    
; 

helper context UML!ValuePin def: no_incoming_edges(): Boolean = 
  UML!ValuePin.allInstances()->forAll(vp |
    name:
    self:
    type:self : Actions::ValuePin[1]
    isEmpty	
    
; 

helper context UML!ValuePin def: compatible_type(): Boolean = 
  UML!ValuePin.allInstances()->forAll(vp |
    name:
    self:
    type:
    
; 

helper context UML!ValueSpecificationAction def: multiplicity(): Boolean = 
  UML!ValueSpecificationAction.allInstances()->forAll(vsa |
    name:
    self:
    type:self : Actions::ValueSpecificationAction[1]
    
; 

helper context UML!ValueSpecificationAction def: compatible_type(): Boolean = 
  UML!ValueSpecificationAction.allInstances()->forAll(vsa |
    name:
    self:
    type:
    
; 

helper context UML!VariableAction def: scope_of_variable(): Boolean = 
  UML!VariableAction.allInstances()->forAll(va |
    name:
    self:
    type:self : Actions::VariableAction[1]
    
; 

helper context UML!WriteLinkAction def: allow_access(): Boolean = 
  UML!WriteLinkAction.allInstances()->forAll(wla |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!WriteStructuralFeatureAction def: multiplicity_of_result(): Boolean = 
  UML!WriteStructuralFeatureAction.allInstances()->forAll(wsfa |
    name:
    self:
    type:self : Actions::WriteStructuralFeatureAction[1]
    <>	
    
    implies	
    
; 

helper context UML!WriteStructuralFeatureAction def: type_of_value(): Boolean = 
  UML!WriteStructuralFeatureAction.allInstances()->forAll(wsfa |
    name:
    self:
    type:self : Actions::WriteStructuralFeatureAction[1]
    <>	
    
    implies	
    
; 

helper context UML!WriteStructuralFeatureAction def: multiplicity_of_value(): Boolean = 
  UML!WriteStructuralFeatureAction.allInstances()->forAll(wsfa |
    name:
    self:
    type:self : Actions::WriteStructuralFeatureAction[1]
    <>	
    
    implies	
    
; 

helper context UML!WriteStructuralFeatureAction def: type_of_result(): Boolean = 
  UML!WriteStructuralFeatureAction.allInstances()->forAll(wsfa |
    name:
    self:
    type:self : Actions::WriteStructuralFeatureAction[1]
    <>	
    
    implies	
    
; 

helper context UML!WriteVariableAction def: value_type(): Boolean = 
  UML!WriteVariableAction.allInstances()->forAll(wva |
    name:
    self:
    type:self : Actions::WriteVariableAction[1]
    <>	
    
    implies	
    
; 

helper context UML!WriteVariableAction def: multiplicity(): Boolean = 
  UML!WriteVariableAction.allInstances()->forAll(wva |
    name:
    self:
    type:self : Actions::WriteVariableAction[1]
    <>	
    
    implies	
    
; 

helper context UML!Activity def: maximum_one_parameter_node(): Boolean = 
  UML!Activity.allInstances()->forAll(a |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Activity def: maximum_two_parameter_nodes(): Boolean = 
  UML!Activity.allInstances()->forAll(a |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ActivityEdge def: source_and_target(): Boolean = 
  UML!ActivityEdge.allInstances()->forAll(ae |
    name:
    self:
    type:self : Activities::ActivityEdge[1]
    <>	
    
    implies	
    
; 

helper context UML!ActivityGroup def: nodes_and_edges(): Boolean = 
  UML!ActivityGroup.allInstances()->forAll(ag |
    // We don't understand ocl expression IteratorExp
    and	
    
; 

helper context UML!ActivityGroup def: not_contained(): Boolean = 
  UML!ActivityGroup.allInstances()->forAll(ag |
    // We don't understand ocl expression IteratorExp
    excludesAll	
    
    and	
    
    and	
    
    and	
    
; 

helper context UML!ActivityParameterNode def: no_outgoing_edges(): Boolean = 
  UML!ActivityParameterNode.allInstances()->forAll(apn |
    name:
    self:
    type:self : Activities::ActivityParameterNode[1]
    notEmpty	
    
    and	
    
    implies	
    
; 

helper context UML!ActivityParameterNode def: has_parameters(): Boolean = 
  UML!ActivityParameterNode.allInstances()->forAll(apn |
    name:
    self:
    type:
    includes	
    
; 

helper context UML!ActivityParameterNode def: same_type(): Boolean = 
  UML!ActivityParameterNode.allInstances()->forAll(apn |
    name:
    self:
    type:self : Activities::ActivityParameterNode[1]
    =	
    
; 

helper context UML!ActivityParameterNode def: no_incoming_edges(): Boolean = 
  UML!ActivityParameterNode.allInstances()->forAll(apn |
    name:
    self:
    type:self : Activities::ActivityParameterNode[1]
    notEmpty	
    
    and	
    
    implies	
    
; 

helper context UML!ActivityParameterNode def: no_edges(): Boolean = 
  UML!ActivityParameterNode.allInstances()->forAll(apn |
    name:
    self:
    type:self : Activities::ActivityParameterNode[1]
    isEmpty	
    
    or	
    
; 

helper context UML!ActivityPartition def: represents_classifier(): Boolean = 
  UML!ActivityPartition.allInstances()->forAll(ap |
    name:
    self:isExternal
    type:self : Activities::ActivityPartition[1]
    not	
    
    and	
    
    and	
    
    implies	
    
; 

helper context UML!ActivityPartition def: represents_property_and_is_contained(): Boolean = 
  UML!ActivityPartition.allInstances()->forAll(ap |
    name:
    self:
    type:self : Activities::ActivityPartition[1]
    oclIsKindOf	
    
    and	
    
    implies	
    
; 

helper context UML!ActivityPartition def: represents_property(): Boolean = 
  UML!ActivityPartition.allInstances()->forAll(ap |
    name:
    self:
    type:self : Activities::ActivityPartition[1]
    oclIsKindOf	
    
    and	
    
    and	
    
    implies	
    
; 

helper context UML!ActivityPartition def: dimension_not_contained(): Boolean = 
  UML!ActivityPartition.allInstances()->forAll(ap |
    name:
    self:isDimension
    type:self : Activities::ActivityPartition[1]
    implies	
    
; 

helper context UML!ControlFlow def: object_nodes(): Boolean = 
  UML!ControlFlow.allInstances()->forAll(cf |
    name:
    self:
    type:self : Activities::ControlFlow[1]
    oclIsKindOf	
    
    implies	
    
    and	
    
; 

helper context UML!DecisionNode def: zero_input_parameters(): Boolean = 
  UML!DecisionNode.allInstances()->forAll(dn |
    name:
    self:
    type:self : Activities::DecisionNode[1]
    <>	
    
    and	
    
    and	
    
    implies	
    
; 

helper context UML!DecisionNode def: edges(): Boolean = 
  UML!DecisionNode.allInstances()->forAll(dn |
    // We don't understand ocl expression LetExp
; 

helper context UML!DecisionNode def: decision_input_flow_incoming(): Boolean = 
  UML!DecisionNode.allInstances()->forAll(dn |
    name:
    self:
    type:self : Activities::DecisionNode[1]
    includes	
    
; 

helper context UML!DecisionNode def: two_input_parameters(): Boolean = 
  UML!DecisionNode.allInstances()->forAll(dn |
    name:
    self:
    type:self : Activities::DecisionNode[1]
    <>	
    
    and	
    
    and	
    
    implies	
    
; 

helper context UML!DecisionNode def: incoming_outgoing_edges(): Boolean = 
  UML!DecisionNode.allInstances()->forAll(dn |
    name:
    self:
    type:self : Activities::DecisionNode[1]
    size	
    
    =	
    
    or	
    
    and	
    
; 

helper context UML!DecisionNode def: incoming_control_one_input_parameter(): Boolean = 
  UML!DecisionNode.allInstances()->forAll(dn |
    name:
    self:
    type:self : Activities::DecisionNode[1]
    <>	
    
    and	
    
    and	
    
    implies	
    
; 

helper context UML!DecisionNode def: parameters(): Boolean = 
  UML!DecisionNode.allInstances()->forAll(dn |
    name:
    self:
    type:self : Activities::DecisionNode[1]
    <>	
    
    implies	
    
; 

helper context UML!DecisionNode def: incoming_object_one_input_parameter(): Boolean = 
  UML!DecisionNode.allInstances()->forAll(dn |
    name:
    self:
    type:self : Activities::DecisionNode[1]
    <>	
    
    and	
    
    and	
    
    implies	
    
; 

helper context UML!ExceptionHandler def: handler_body_edges(): Boolean = 
  UML!ExceptionHandler.allInstances()->forAll(eh |
    name:
    self:
    type:
    isEmpty	
    
    and	
    
    and	
    
; 

helper context UML!ExceptionHandler def: output_pins(): Boolean = 
  UML!ExceptionHandler.allInstances()->forAll(eh |
    name:
    self:
    type:self : Activities::ExceptionHandler[1]
    oclIsKindOf	
    
    and	
    
    implies	
    
; 

helper context UML!ExceptionHandler def: one_input(): Boolean = 
  UML!ExceptionHandler.allInstances()->forAll(eh |
    name:
    self:
    type:self : Activities::ExceptionHandler[1]
    oclIsKindOf	
    
    and	
    
; 

helper context UML!ExceptionHandler def: edge_source_target(): Boolean = 
  UML!ExceptionHandler.allInstances()->forAll(eh |
    // We don't understand ocl expression LetExp
; 

helper context UML!ExceptionHandler def: handler_body_owner(): Boolean = 
  UML!ExceptionHandler.allInstances()->forAll(eh |
    name:
    self:
    type:
    =	
    
; 

helper context UML!ExceptionHandler def: exception_input_type(): Boolean = 
  UML!ExceptionHandler.allInstances()->forAll(eh |
    name:
    self:
    type:
    =	
    
    or	
    
; 

helper context UML!FinalNode def: no_outgoing_edges(): Boolean = 
  UML!FinalNode.allInstances()->forAll(fn |
    name:
    self:
    type:self : Activities::FinalNode[1]
    isEmpty	
    
; 

helper context UML!ForkNode def: edges(): Boolean = 
  UML!ForkNode.allInstances()->forAll(fn |
    // We don't understand ocl expression LetExp
; 

helper context UML!ForkNode def: one_incoming_edge(): Boolean = 
  UML!ForkNode.allInstances()->forAll(fn |
    name:
    self:
    type:self : Activities::ForkNode[1]
    size	
    
    =	
    
; 

helper context UML!InitialNode def: no_incoming_edges(): Boolean = 
  UML!InitialNode.allInstances()->forAll(in |
    name:
    self:
    type:self : Activities::InitialNode[1]
    isEmpty	
    
; 

helper context UML!InitialNode def: control_edges(): Boolean = 
  UML!InitialNode.allInstances()->forAll(in |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!InterruptibleActivityRegion def: interrupting_edges(): Boolean = 
  UML!InterruptibleActivityRegion.allInstances()->forAll(iar |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!JoinNode def: one_outgoing_edge(): Boolean = 
  UML!JoinNode.allInstances()->forAll(jn |
    name:
    self:
    type:self : Activities::JoinNode[1]
    size	
    
    =	
    
; 

helper context UML!JoinNode def: incoming_object_flow(): Boolean = 
  UML!JoinNode.allInstances()->forAll(jn |
    // We don't understand ocl expression IfExp
; 

helper context UML!MergeNode def: one_outgoing_edge(): Boolean = 
  UML!MergeNode.allInstances()->forAll(mn |
    name:
    self:
    type:self : Activities::MergeNode[1]
    size	
    
    =	
    
; 

helper context UML!MergeNode def: edges(): Boolean = 
  UML!MergeNode.allInstances()->forAll(mn |
    // We don't understand ocl expression LetExp
; 

helper context UML!ObjectFlow def: input_and_output_parameter(): Boolean = 
  UML!ObjectFlow.allInstances()->forAll(of |
    name:
    self:
    type:self : Activities::ObjectFlow[1]
    <>	
    
    implies	
    
; 

helper context UML!ObjectFlow def: no_executable_nodes(): Boolean = 
  UML!ObjectFlow.allInstances()->forAll(of |
    name:
    self:
    type:self : Activities::ObjectFlow[1]
    oclIsKindOf	
    
    or	
    
    not	
    
; 

helper context UML!ObjectFlow def: transformation_behavior(): Boolean = 
  UML!ObjectFlow.allInstances()->forAll(of |
    name:
    self:
    type:self : Activities::ObjectFlow[1]
    <>	
    
    implies	
    
; 

helper context UML!ObjectFlow def: selection_behavior(): Boolean = 
  UML!ObjectFlow.allInstances()->forAll(of |
    name:
    self:
    type:self : Activities::ObjectFlow[1]
    <>	
    
    implies	
    
; 

helper context UML!ObjectFlow def: compatible_types(): Boolean = 
  UML!ObjectFlow.allInstances()->forAll(of |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!ObjectFlow def: same_upper_bounds(): Boolean = 
  UML!ObjectFlow.allInstances()->forAll(of |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!ObjectFlow def: target(): Boolean = 
  UML!ObjectFlow.allInstances()->forAll(of |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!ObjectFlow def: is_multicast_or_is_multireceive(): Boolean = 
  UML!ObjectFlow.allInstances()->forAll(of |
    name:
    self:isMulticast
    type:self : Activities::ObjectFlow[1]
    and	
    
    not	
    
; 

helper context UML!ObjectNode def: input_output_parameter(): Boolean = 
  UML!ObjectNode.allInstances()->forAll(on |
    name:
    self:
    type:self : Activities::ObjectNode[1]
    <>	
    
    implies	
    
; 

helper context UML!ObjectNode def: selection_behavior(): Boolean = 
  UML!ObjectNode.allInstances()->forAll(on |
    name:
    self:
    type:self : Activities::ObjectNode[1]
    <>	
    
    =	
    
    =	
    
; 

helper context UML!ObjectNode def: object_flow_edges(): Boolean = 
  UML!ObjectNode.allInstances()->forAll(on |
    name:
    self:isControlType
    type:self : Activities::ObjectNode[1]
    not	
    
    implies	
    
; 

helper context UML!BehavioralFeature def: abstract_no_method(): Boolean = 
  UML!BehavioralFeature.allInstances()->forAll(bf |
    name:
    self:isAbstract
    type:self : Classification::BehavioralFeature[1]
    implies	
    
; 

helper context UML!Classifier def: specialize_type(): Boolean = 
  UML!Classifier.allInstances()->forAll(c |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Classifier def: maps_to_generalization_set(): Boolean = 
  UML!Classifier.allInstances()->forAll(c |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Classifier def: non_final_parents(): Boolean = 
  UML!Classifier.allInstances()->forAll(c |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Classifier def: no_cycles_in_generalization(): Boolean = 
  UML!Classifier.allInstances()->forAll(c |
    allParents	
    
    includes	
    
    not	
    
; 

helper context UML!ClassifierTemplateParameter def: has_constraining_classifier(): Boolean = 
  UML!ClassifierTemplateParameter.allInstances()->forAll(ctp |
    name:
    self:allowSubstitutable
    type:self : Classification::ClassifierTemplateParameter[1]
    implies	
    
; 

helper context UML!ClassifierTemplateParameter def: parametered_element_no_features(): Boolean = 
  UML!ClassifierTemplateParameter.allInstances()->forAll(ctp |
    name:
    self:
    type:
    isEmpty	
    
    and	
    
; 

helper context UML!ClassifierTemplateParameter def: matching_abstract(): Boolean = 
  UML!ClassifierTemplateParameter.allInstances()->forAll(ctp |
    name:
    self:
    type:
    not	
    
    implies	
    
; 

helper context UML!ClassifierTemplateParameter def: actual_is_classifier(): Boolean = 
  UML!ClassifierTemplateParameter.allInstances()->forAll(ctp |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ClassifierTemplateParameter def: constraining_classifiers_constrain_args(): Boolean = 
  UML!ClassifierTemplateParameter.allInstances()->forAll(ctp |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ClassifierTemplateParameter def: constraining_classifiers_constrain_parametered_element(): Boolean = 
  UML!ClassifierTemplateParameter.allInstances()->forAll(ctp |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!GeneralizationSet def: generalization_same_classifier(): Boolean = 
  UML!GeneralizationSet.allInstances()->forAll(gs |
    // We don't understand ocl expression IteratorExp
    asSet	
    
    size	
    
    <=	
    
; 

helper context UML!GeneralizationSet def: maps_to_generalization_set(): Boolean = 
  UML!GeneralizationSet.allInstances()->forAll(gs |
    name:
    self:
    type:self : Classification::GeneralizationSet[1]
    <>	
    
    implies	
    
; 

helper context UML!InstanceSpecification def: deployment_artifact(): Boolean = 
  UML!InstanceSpecification.allInstances()->forAll(is |
    // We don't understand ocl expression OppositePropertyCallExp
    notEmpty	
    
    implies	
    
; 

helper context UML!InstanceSpecification def: structural_feature(): Boolean = 
  UML!InstanceSpecification.allInstances()->forAll(is |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!InstanceSpecification def: defining_feature(): Boolean = 
  UML!InstanceSpecification.allInstances()->forAll(is |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!InstanceSpecification def: deployment_target(): Boolean = 
  UML!InstanceSpecification.allInstances()->forAll(is |
    name:
    self:
    type:self : Classification::InstanceSpecification[1]
    notEmpty	
    
    implies	
    
; 

helper context UML!Operation def: at_most_one_return(): Boolean = 
  UML!Operation.allInstances()->forAll(o |
    // We don't understand ocl expression IteratorExp
    size	
    
    <=	
    
; 

helper context UML!Operation def: only_body_for_query(): Boolean = 
  UML!Operation.allInstances()->forAll(o |
    name:
    self:
    type:self : Classification::Operation[1]
    <>	
    
    implies	
    
; 

helper context UML!OperationTemplateParameter def: match_default_signature(): Boolean = 
  UML!OperationTemplateParameter.allInstances()->forAll(otp |
    name:
    self:
    type:self : Classification::OperationTemplateParameter[1]
    oclAsSet	
    
    notEmpty	
    
    implies	
    
; 

helper context UML!Parameter def: in_and_out(): Boolean = 
  UML!Parameter.allInstances()->forAll(p |
    name:
    self:
    type:self : Classification::Parameter[1]
    =	
    
    implies	
    
    and	
    
; 

helper context UML!Parameter def: not_exception(): Boolean = 
  UML!Parameter.allInstances()->forAll(p |
    name:
    self:isException
    type:self : Classification::Parameter[1]
    implies	
    
; 

helper context UML!Parameter def: connector_end(): Boolean = 
  UML!Parameter.allInstances()->forAll(p |
    name:
    self:
    type:self : Classification::Parameter[1]
    notEmpty	
    
    implies	
    
; 

helper context UML!Parameter def: reentrant_behaviors(): Boolean = 
  UML!Parameter.allInstances()->forAll(p |
    name:
    self:isStream
    type:self : Classification::Parameter[1]
    and	
    
    implies	
    
; 

helper context UML!Parameter def: stream_and_exception(): Boolean = 
  UML!Parameter.allInstances()->forAll(p |
    name:
    self:isException
    type:self : Classification::Parameter[1]
    and	
    
    not	
    
; 

helper context UML!Parameter def: object_effect(): Boolean = 
  UML!Parameter.allInstances()->forAll(p |
    name:
    self:
    type:self : Classification::Parameter[1]
    oclIsKindOf	
    
    implies	
    
; 

helper context UML!ParameterSet def: same_parameterized_entity(): Boolean = 
  UML!ParameterSet.allInstances()->forAll(ps |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ParameterSet def: input(): Boolean = 
  UML!ParameterSet.allInstances()->forAll(ps |
    // We don't understand ocl expression IteratorExp
    implies	
    
    and	
    
; 

helper context UML!ParameterSet def: two_parameter_sets(): Boolean = 
  UML!ParameterSet.allInstances()->forAll(ps |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Property def: subsetting_context_conforms(): Boolean = 
  UML!Property.allInstances()->forAll(p |
    name:
    self:
    type:self : Classification::Property[1]
    notEmpty	
    
    implies	
    
; 

helper context UML!Property def: derived_union_is_read_only(): Boolean = 
  UML!Property.allInstances()->forAll(p |
    name:
    self:isDerivedUnion
    type:self : Classification::Property[1]
    implies	
    
; 

helper context UML!Property def: multiplicity_of_composite(): Boolean = 
  UML!Property.allInstances()->forAll(p |
    name:
    self:isComposite
    type:self : Classification::Property[1]
    and	
    
    implies	
    
; 

helper context UML!Property def: redefined_property_inherited(): Boolean = 
  UML!Property.allInstances()->forAll(p |
    name:
    self:
    type:self : Classification::Property[1]
    notEmpty	
    
    implies	
    
; 

helper context UML!Property def: subsetting_rules(): Boolean = 
  UML!Property.allInstances()->forAll(p |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Property def: binding_to_attribute(): Boolean = 
  UML!Property.allInstances()->forAll(p |
    isAttribute	
    
    and	
    
    implies	
    
; 

helper context UML!Property def: derived_union_is_derived(): Boolean = 
  UML!Property.allInstances()->forAll(p |
    name:
    self:isDerivedUnion
    type:self : Classification::Property[1]
    implies	
    
; 

helper context UML!Property def: deployment_target(): Boolean = 
  UML!Property.allInstances()->forAll(p |
    name:
    self:
    type:self : Classification::Property[1]
    notEmpty	
    
    implies	
    
; 

helper context UML!Property def: subsetted_property_names(): Boolean = 
  UML!Property.allInstances()->forAll(p |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Property def: type_of_opposite_end(): Boolean = 
  UML!Property.allInstances()->forAll(p |
    name:
    self:
    type:self : Classification::Property[1]
    oclAsSet	
    
    notEmpty	
    
    and	
    
    implies	
    
; 

helper context UML!Property def: qualified_is_association_end(): Boolean = 
  UML!Property.allInstances()->forAll(p |
    name:
    self:
    type:self : Classification::Property[1]
    notEmpty	
    
    implies	
    
; 

helper context UML!RedefinableElement def: redefinition_consistent(): Boolean = 
  UML!RedefinableElement.allInstances()->forAll(re |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!RedefinableElement def: non_leaf_redefinition(): Boolean = 
  UML!RedefinableElement.allInstances()->forAll(re |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!RedefinableElement def: redefinition_context_valid(): Boolean = 
  UML!RedefinableElement.allInstances()->forAll(re |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!RedefinableTemplateSignature def: redefines_parents(): Boolean = 
  UML!RedefinableTemplateSignature.allInstances()->forAll(rts |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Behavior def: most_one_behavior(): Boolean = 
  UML!Behavior.allInstances()->forAll(b |
    name:
    self:
    type:self : CommonBehavior::Behavior[1]
    <>	
    
    implies	
    
; 

helper context UML!Behavior def: parameters_match(): Boolean = 
  UML!Behavior.allInstances()->forAll(b |
    name:
    self:
    type:self : CommonBehavior::Behavior[1]
    <>	
    
    implies	
    
; 

helper context UML!Behavior def: feature_of_context_classifier(): Boolean = 
  UML!Behavior.allInstances()->forAll(b |
    name:
    self:
    type:
    includes	
    
; 

helper context UML!FunctionBehavior def: one_output_parameter(): Boolean = 
  UML!FunctionBehavior.allInstances()->forAll(fb |
    // We don't understand ocl expression IteratorExp
    size	
    
    >=	
    
; 

helper context UML!FunctionBehavior def: types_of_parameters(): Boolean = 
  UML!FunctionBehavior.allInstances()->forAll(fb |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!TimeEvent def: when_non_negative(): Boolean = 
  UML!TimeEvent.allInstances()->forAll(te |
    name:
    self:
    type:self : CommonBehavior::TimeEvent[1]
    
    >=	
    
; 

helper context UML!Trigger def: trigger_with_ports(): Boolean = 
  UML!Trigger.allInstances()->forAll(t |
    name:
    self:
    type:self : CommonBehavior::Trigger[1]
    notEmpty	
    
    implies	
    
; 

helper context UML!Constraint def: boolean_value(): Boolean = 
  UML!Constraint.allInstances()->forAll(c |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!Constraint def: no_side_effects(): Boolean = 
  UML!Constraint.allInstances()->forAll(c |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!Constraint def: not_apply_to_self(): Boolean = 
  UML!Constraint.allInstances()->forAll(c |
    name:
    self:
    type:self : CommonStructure::Constraint[1]
    includes	
    
    not	
    
; 

helper context UML!Element def: has_owner(): Boolean = 
  UML!Element.allInstances()->forAll(e |
    mustBeOwned	
    
    implies	
    
; 

helper context UML!Element def: not_own_self(): Boolean = 
  UML!Element.allInstances()->forAll(e |
    allOwnedElements	
    
    includes	
    
    not	
    
; 

helper context UML!ElementImport def: imported_element_is_public(): Boolean = 
  UML!ElementImport.allInstances()->forAll(ei |
    name:
    self:
    type:
    <>	
    
    implies	
    
; 

helper context UML!ElementImport def: visibility_public_or_private(): Boolean = 
  UML!ElementImport.allInstances()->forAll(ei |
    name:
    self:visibility
    type:self : CommonStructure::ElementImport[1]
    =	
    
    or	
    
; 

helper context UML!MultiplicityElement def: upper_ge_lower(): Boolean = 
  UML!MultiplicityElement.allInstances()->forAll(me |
    upperBound	
    
    >=	
    
; 

helper context UML!MultiplicityElement def: lower_ge_0(): Boolean = 
  UML!MultiplicityElement.allInstances()->forAll(me |
    lowerBound	
    
    >=	
    
; 

helper context UML!MultiplicityElement def: value_specification_no_side_effects(): Boolean = 
  UML!MultiplicityElement.allInstances()->forAll(me |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!MultiplicityElement def: value_specification_constant(): Boolean = 
  UML!MultiplicityElement.allInstances()->forAll(me |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!MultiplicityElement def: lower_is_integer(): Boolean = 
  UML!MultiplicityElement.allInstances()->forAll(me |
    name:
    self:
    type:self : CommonStructure::MultiplicityElement[1]
    <>	
    
    implies	
    
; 

helper context UML!MultiplicityElement def: upper_is_unlimitedNatural(): Boolean = 
  UML!MultiplicityElement.allInstances()->forAll(me |
    name:
    self:
    type:self : CommonStructure::MultiplicityElement[1]
    <>	
    
    implies	
    
; 

helper context UML!NamedElement def: visibility_needs_ownership(): Boolean = 
  UML!NamedElement.allInstances()->forAll(ne |
    name:
    self:
    type:self : CommonStructure::NamedElement[1]
    =	
    
    and	
    
    implies	
    
; 

helper context UML!NamedElement def: has_qualified_name(): Boolean = 
  UML!NamedElement.allInstances()->forAll(ne |
    name:
    self:
    type:self : CommonStructure::NamedElement[1]
    <>	
    
    and	
    
    implies	
    
; 

helper context UML!NamedElement def: has_no_qualified_name(): Boolean = 
  UML!NamedElement.allInstances()->forAll(ne |
    name:
    self:
    type:self : CommonStructure::NamedElement[1]
    =	
    
    or	
    
    implies	
    
; 

helper context UML!Namespace def: members_distinguishable(): Boolean = 
  UML!Namespace.allInstances()->forAll(n |
    membersAreDistinguishable	
    
; 

helper context UML!Namespace def: cannot_import_self(): Boolean = 
  UML!Namespace.allInstances()->forAll(n |
    // We don't understand ocl expression IteratorExp
    excludes	
    
; 

helper context UML!Namespace def: cannot_import_ownedMembers(): Boolean = 
  UML!Namespace.allInstances()->forAll(n |
    // We don't understand ocl expression IteratorExp
    excludesAll	
    
; 

helper context UML!PackageImport def: public_or_private(): Boolean = 
  UML!PackageImport.allInstances()->forAll(pi |
    name:
    self:visibility
    type:self : CommonStructure::PackageImport[1]
    =	
    
    or	
    
; 

helper context UML!PackageableElement def: namespace_needs_visibility(): Boolean = 
  UML!PackageableElement.allInstances()->forAll(pe |
    name:
    self:visibility
    type:self : CommonStructure::PackageableElement[1]
    =	
    
    implies	
    
; 

helper context UML!TemplateBinding def: parameter_substitution_formal(): Boolean = 
  UML!TemplateBinding.allInstances()->forAll(tb |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!TemplateBinding def: one_parameter_substitution(): Boolean = 
  UML!TemplateBinding.allInstances()->forAll(tb |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!TemplateParameter def: must_be_compatible(): Boolean = 
  UML!TemplateParameter.allInstances()->forAll(tp |
    name:
    self:
    type:self : CommonStructure::TemplateParameter[1]
    <>	
    
    implies	
    
; 

helper context UML!TemplateParameterSubstitution def: must_be_compatible(): Boolean = 
  UML!TemplateParameterSubstitution.allInstances()->forAll(tps |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!TemplateSignature def: own_elements(): Boolean = 
  UML!TemplateSignature.allInstances()->forAll(ts |
    name:
    self:
    type:
    includesAll	
    
; 

helper context UML!TemplateSignature def: unique_parameters(): Boolean = 
  UML!TemplateSignature.allInstances()->forAll(ts |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!CommunicationPath def: association_ends(): Boolean = 
  UML!CommunicationPath.allInstances()->forAll(cp |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!DeploymentSpecification def: deployment_target(): Boolean = 
  UML!DeploymentSpecification.allInstances()->forAll(ds |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!DeploymentSpecification def: deployed_elements(): Boolean = 
  UML!DeploymentSpecification.allInstances()->forAll(ds |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Node def: internal_structure(): Boolean = 
  UML!Node.allInstances()->forAll(n |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!InformationFlow def: must_conform(): Boolean = 
  UML!InformationFlow.allInstances()->forAll(if |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!InformationFlow def: sources_and_targets_kind(): Boolean = 
  UML!InformationFlow.allInstances()->forAll(if |
    // We don't understand ocl expression IteratorExp
    and	
    
; 

helper context UML!InformationFlow def: convey_classifiers(): Boolean = 
  UML!InformationFlow.allInstances()->forAll(if |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!InformationItem def: sources_and_targets(): Boolean = 
  UML!InformationItem.allInstances()->forAll(ii |
    // We don't understand ocl expression IteratorExp
    and	
    
; 

helper context UML!InformationItem def: has_no(): Boolean = 
  UML!InformationItem.allInstances()->forAll(ii |
    name:
    self:
    type:self : InformationFlows::InformationItem[1]
    oclAsSet	
    
    isEmpty	
    
    and	
    
; 

helper context UML!InformationItem def: not_instantiable(): Boolean = 
  UML!InformationItem.allInstances()->forAll(ii |
    name:
    self:
    type:self : InformationFlows::InformationItem[1]
; 

helper context UML!ActionExecutionSpecification def: action_referenced(): Boolean = 
  UML!ActionExecutionSpecification.allInstances()->forAll(aes |
    name:
    self:
    type:self : Interactions::ActionExecutionSpecification[1]
    oclAsSet	
    
    notEmpty	
    
    or	
    
    and	
    
; 

helper context UML!CombinedFragment def: break(): Boolean = 
  UML!CombinedFragment.allInstances()->forAll(cf |
    name:
    self:interactionOperator
    type:self : Interactions::CombinedFragment[1]
    =	
    
    implies	
    
; 

helper context UML!CombinedFragment def: consider_and_ignore(): Boolean = 
  UML!CombinedFragment.allInstances()->forAll(cf |
    name:
    self:interactionOperator
    type:self : Interactions::CombinedFragment[1]
    =	
    
    or	
    
    implies	
    
; 

helper context UML!CombinedFragment def: opt_loop_break_neg(): Boolean = 
  UML!CombinedFragment.allInstances()->forAll(cf |
    name:
    self:interactionOperator
    type:self : Interactions::CombinedFragment[1]
    =	
    
    or	
    
    or	
    
    or	
    
    or	
    
    implies	
    
; 

helper context UML!ConsiderIgnoreFragment def: consider_or_ignore(): Boolean = 
  UML!ConsiderIgnoreFragment.allInstances()->forAll(cif |
    name:
    self:
    type:self : Interactions::ConsiderIgnoreFragment[1]
    =	
    
    or	
    
; 

helper context UML!ConsiderIgnoreFragment def: type(): Boolean = 
  UML!ConsiderIgnoreFragment.allInstances()->forAll(cif |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Continuation def: first_or_last_interaction_fragment(): Boolean = 
  UML!Continuation.allInstances()->forAll(c |
    name:
    self:
    type:self : Interactions::Continuation[1]
    oclAsSet	
    
    notEmpty	
    
    and	
    
; 

helper context UML!Continuation def: same_name(): Boolean = 
  UML!Continuation.allInstances()->forAll(c |
    // We don't understand ocl expression OppositePropertyCallExp
    oclAsSet	
    
    notEmpty	
    
    and	
    
; 

helper context UML!Continuation def: global(): Boolean = 
  UML!Continuation.allInstances()->forAll(c |
    name:
    self:
    type:self : Interactions::Continuation[1]
    oclAsSet	
    
    notEmpty	
    
    and	
    
; 

helper context UML!DestructionOccurrenceSpecification def: no_occurrence_specifications_below(): Boolean = 
  UML!DestructionOccurrenceSpecification.allInstances()->forAll(dos |
    // We don't understand ocl expression LetExp
; 

helper context UML!ExecutionSpecification def: same_lifeline(): Boolean = 
  UML!ExecutionSpecification.allInstances()->forAll(es |
    name:
    self:
    type:
    =	
    
; 

helper context UML!Gate def: actual_gate_matched(): Boolean = 
  UML!Gate.allInstances()->forAll(g |
    // We don't understand ocl expression OppositePropertyCallExp
    oclAsSet	
    
    notEmpty	
    
    implies	
    
; 

helper context UML!Gate def: inside_cf_matched(): Boolean = 
  UML!Gate.allInstances()->forAll(g |
    isInsideCF	
    
    implies	
    
; 

helper context UML!Gate def: outside_cf_matched(): Boolean = 
  UML!Gate.allInstances()->forAll(g |
    isOutsideCF	
    
    implies	
    
; 

helper context UML!Gate def: formal_gate_distinguishable(): Boolean = 
  UML!Gate.allInstances()->forAll(g |
    isFormal	
    
    implies	
    
; 

helper context UML!Gate def: actual_gate_distinguishable(): Boolean = 
  UML!Gate.allInstances()->forAll(g |
    isActual	
    
    implies	
    
; 

helper context UML!Gate def: outside_cf_gate_distinguishable(): Boolean = 
  UML!Gate.allInstances()->forAll(g |
    isOutsideCF	
    
    implies	
    
; 

helper context UML!Gate def: inside_cf_gate_distinguishable(): Boolean = 
  UML!Gate.allInstances()->forAll(g |
    isInsideCF	
    
    implies	
    
; 

helper context UML!GeneralOrdering def: irreflexive_transitive_closure(): Boolean = 
  UML!GeneralOrdering.allInstances()->forAll(go |
    // We don't understand ocl expression IteratorExp
    excludes	
    
; 

helper context UML!Interaction def: not_contained(): Boolean = 
  UML!Interaction.allInstances()->forAll(i |
    name:
    self:
    type:self : Interactions::Interaction[1]
    oclAsSet	
    
    isEmpty	
    
; 

helper context UML!InteractionConstraint def: minint_maxint(): Boolean = 
  UML!InteractionConstraint.allInstances()->forAll(ic |
    name:
    self:
    type:self : Interactions::InteractionConstraint[1]
    oclAsSet	
    
    notEmpty	
    
    or	
    
    implies	
    
; 

helper context UML!InteractionConstraint def: minint_non_negative(): Boolean = 
  UML!InteractionConstraint.allInstances()->forAll(ic |
    name:
    self:
    type:self : Interactions::InteractionConstraint[1]
    oclAsSet	
    
    notEmpty	
    
    implies	
    
; 

helper context UML!InteractionConstraint def: maxint_positive(): Boolean = 
  UML!InteractionConstraint.allInstances()->forAll(ic |
    name:
    self:
    type:self : Interactions::InteractionConstraint[1]
    oclAsSet	
    
    notEmpty	
    
    implies	
    
; 

helper context UML!InteractionConstraint def: dynamic_variables(): Boolean = 
  UML!InteractionConstraint.allInstances()->forAll(ic |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!InteractionConstraint def: global_data(): Boolean = 
  UML!InteractionConstraint.allInstances()->forAll(ic |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!InteractionConstraint def: maxint_greater_equal_minint(): Boolean = 
  UML!InteractionConstraint.allInstances()->forAll(ic |
    name:
    self:
    type:self : Interactions::InteractionConstraint[1]
    oclAsSet	
    
    notEmpty	
    
    implies	
    
; 

helper context UML!InteractionOperand def: guard_contain_references(): Boolean = 
  UML!InteractionOperand.allInstances()->forAll(io |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!InteractionOperand def: guard_directly_prior(): Boolean = 
  UML!InteractionOperand.allInstances()->forAll(io |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!InteractionUse def: gates_match(): Boolean = 
  UML!InteractionUse.allInstances()->forAll(iu |
    name:
    self:
    type:self : Interactions::InteractionUse[1]
    notEmpty	
    
    implies	
    
; 

helper context UML!InteractionUse def: arguments_are_constants(): Boolean = 
  UML!InteractionUse.allInstances()->forAll(iu |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!InteractionUse def: returnValueRecipient_coverage(): Boolean = 
  UML!InteractionUse.allInstances()->forAll(iu |
    name:
    self:
    type:self : Interactions::InteractionUse[1]
    oclAsSet	
    
    asSet	
    
    notEmpty	
    
    implies	
    
; 

helper context UML!InteractionUse def: arguments_correspond_to_parameters(): Boolean = 
  UML!InteractionUse.allInstances()->forAll(iu |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!InteractionUse def: returnValue_type_recipient_correspondence(): Boolean = 
  UML!InteractionUse.allInstances()->forAll(iu |
    name:
    self:
    type:
    oclAsSet	
    
    asSequence	
    
    notEmpty	
    
    implies	
    
; 

helper context UML!InteractionUse def: all_lifelines(): Boolean = 
  UML!InteractionUse.allInstances()->forAll(iu |
    // We don't understand ocl expression LetExp
; 

helper context UML!Lifeline def: selector_specified(): Boolean = 
  UML!Lifeline.allInstances()->forAll(l |
    name:
    self:
    type:self : Interactions::Lifeline[1]
    oclAsSet	
    
    notEmpty	
    
    =	
    
; 

helper context UML!Lifeline def: interaction_uses_share_lifeline(): Boolean = 
  UML!Lifeline.allInstances()->forAll(l |
    // We don't understand ocl expression LetExp
; 

helper context UML!Lifeline def: same_classifier(): Boolean = 
  UML!Lifeline.allInstances()->forAll(l |
    // We don't understand ocl expression IteratorExp
    includes	
    
; 

helper context UML!Lifeline def: selector_int_or_string(): Boolean = 
  UML!Lifeline.allInstances()->forAll(l |
    name:
    self:
    type:self : Interactions::Lifeline[1]
    oclAsSet	
    
    notEmpty	
    
    implies	
    
; 

helper context UML!Message def: sending_receiving_message_event(): Boolean = 
  UML!Message.allInstances()->forAll(m |
    name:
    self:
    type:self : Interactions::Message[1]
    oclIsKindOf	
    
    implies	
    
; 

helper context UML!Message def: arguments(): Boolean = 
  UML!Message.allInstances()->forAll(m |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!Message def: cannot_cross_boundaries(): Boolean = 
  UML!Message.allInstances()->forAll(m |
    name:
    self:
    type:self : Interactions::Message[1]
    oclAsSet	
    
    notEmpty	
    
    and	
    
    implies	
    
; 

helper context UML!Message def: signature_is_signal(): Boolean = 
  UML!Message.allInstances()->forAll(m |
    name:
    self:messageSort
    type:self : Interactions::Message[1]
    =	
    
    and	
    
    implies	
    
; 

helper context UML!Message def: occurrence_specifications(): Boolean = 
  UML!Message.allInstances()->forAll(m |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!Message def: signature_refer_to(): Boolean = 
  UML!Message.allInstances()->forAll(m |
    name:
    self:
    type:self : Interactions::Message[1]
    oclAsSet	
    
    notEmpty	
    
    implies	
    
; 

helper context UML!Message def: signature_is_operation_request(): Boolean = 
  UML!Message.allInstances()->forAll(m |
    name:
    self:messageSort
    type:self : Interactions::Message[1]
    =	
    
    or	
    
    and	
    
    implies	
    
; 

helper context UML!Message def: signature_is_operation_reply(): Boolean = 
  UML!Message.allInstances()->forAll(m |
    name:
    self:messageSort
    type:self : Interactions::Message[1]
    =	
    
    and	
    
    implies	
    
; 

helper context UML!PartDecomposition def: commutativity_of_decomposition(): Boolean = 
  UML!PartDecomposition.allInstances()->forAll(pd |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!PartDecomposition def: assume(): Boolean = 
  UML!PartDecomposition.allInstances()->forAll(pd |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!PartDecomposition def: parts_of_internal_structures(): Boolean = 
  UML!PartDecomposition.allInstances()->forAll(pd |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!Extension def: non_owned_end(): Boolean = 
  UML!Extension.allInstances()->forAll(e |
    metaclassEnd	
    
    oclAsSet	
    
    notEmpty	
    
    and	
    
; 

helper context UML!Extension def: is_binary(): Boolean = 
  UML!Extension.allInstances()->forAll(e |
    name:
    self:
    type:self : Packages::Extension[1]
    size	
    
    =	
    
; 

helper context UML!ExtensionEnd def: multiplicity(): Boolean = 
  UML!ExtensionEnd.allInstances()->forAll(ee |
    lowerBound	
    
    =	
    
    or	
    
    and	
    
; 

helper context UML!ExtensionEnd def: aggregation(): Boolean = 
  UML!ExtensionEnd.allInstances()->forAll(ee |
    name:
    self:
    type:self : Packages::ExtensionEnd[1]
    =	
    
; 

helper context UML!Package def: elements_public_or_private(): Boolean = 
  UML!Package.allInstances()->forAll(p |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Profile def: metaclass_reference_not_specialized(): Boolean = 
  UML!Profile.allInstances()->forAll(p |
    // We don't understand ocl expression IteratorExp
    isEmpty	
    
    and	
    
; 

helper context UML!Profile def: references_same_metamodel(): Boolean = 
  UML!Profile.allInstances()->forAll(p |
    // We don't understand ocl expression IteratorExp
    
    notEmpty	
    
; 

helper context UML!Stereotype def: binaryAssociationsOnly(): Boolean = 
  UML!Stereotype.allInstances()->forAll(s |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Stereotype def: generalize(): Boolean = 
  UML!Stereotype.allInstances()->forAll(s |
    // We don't understand ocl expression IteratorExp
    and	
    
; 

helper context UML!Stereotype def: name_not_clash(): Boolean = 
  UML!Stereotype.allInstances()->forAll(s |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!Stereotype def: associationEndOwnership(): Boolean = 
  UML!Stereotype.allInstances()->forAll(s |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Stereotype def: base_property_upper_bound(): Boolean = 
  UML!Stereotype.allInstances()->forAll(s |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!Stereotype def: base_property_multiplicity_single_extension(): Boolean = 
  UML!Stereotype.allInstances()->forAll(s |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!Stereotype def: base_property_multiplicity_multiple_extension(): Boolean = 
  UML!Stereotype.allInstances()->forAll(s |
    // We don't understand ocl expression NullLiteralExp
; 

helper context UML!BehavioredClassifier def: class_behavior(): Boolean = 
  UML!BehavioredClassifier.allInstances()->forAll(bc |
    name:
    self:
    type:self : SimpleClassifiers::BehavioredClassifier[1]
    oclAsSet	
    
    notEmpty	
    
    implies	
    
; 

helper context UML!Enumeration def: immutable(): Boolean = 
  UML!Enumeration.allInstances()->forAll(e |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Interface def: visibility(): Boolean = 
  UML!Interface.allInstances()->forAll(i |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Reception def: same_name_as_signal(): Boolean = 
  UML!Reception.allInstances()->forAll(r |
    name:
    self:
    type:self : SimpleClassifiers::Reception[1]
    =	
    
; 

helper context UML!Reception def: same_structure_as_signal(): Boolean = 
  UML!Reception.allInstances()->forAll(r |
    name:
    self:
    type:
    size	
    
    =	
    
    and	
    
; 

helper context UML!ConnectionPointReference def: exit_pseudostates(): Boolean = 
  UML!ConnectionPointReference.allInstances()->forAll(cpr |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ConnectionPointReference def: entry_pseudostates(): Boolean = 
  UML!ConnectionPointReference.allInstances()->forAll(cpr |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!FinalState def: no_exit_behavior(): Boolean = 
  UML!FinalState.allInstances()->forAll(fs |
    name:
    self:
    type:self : StateMachines::FinalState[1]
    oclAsSet	
    
    isEmpty	
    
; 

helper context UML!FinalState def: no_outgoing_transitions(): Boolean = 
  UML!FinalState.allInstances()->forAll(fs |
    name:
    self:
    type:self : StateMachines::FinalState[1]
    size	
    
    =	
    
; 

helper context UML!FinalState def: no_regions(): Boolean = 
  UML!FinalState.allInstances()->forAll(fs |
    name:
    self:
    type:self : StateMachines::FinalState[1]
    size	
    
    =	
    
; 

helper context UML!FinalState def: cannot_reference_submachine(): Boolean = 
  UML!FinalState.allInstances()->forAll(fs |
    name:
    self:
    type:self : StateMachines::FinalState[1]
    oclAsSet	
    
    isEmpty	
    
; 

helper context UML!FinalState def: no_entry_behavior(): Boolean = 
  UML!FinalState.allInstances()->forAll(fs |
    name:
    self:
    type:self : StateMachines::FinalState[1]
    oclAsSet	
    
    isEmpty	
    
; 

helper context UML!FinalState def: no_state_behavior(): Boolean = 
  UML!FinalState.allInstances()->forAll(fs |
    name:
    self:
    type:self : StateMachines::FinalState[1]
    oclAsSet	
    
    isEmpty	
    
; 

helper context UML!ProtocolStateMachine def: classifier_context(): Boolean = 
  UML!ProtocolStateMachine.allInstances()->forAll(psm |
    name:
    self:
    type:self : StateMachines::ProtocolStateMachine[1]
    <>	
    
    and	
    
; 

helper context UML!ProtocolStateMachine def: deep_or_shallow_history(): Boolean = 
  UML!ProtocolStateMachine.allInstances()->forAll(psm |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ProtocolStateMachine def: entry_exit_do(): Boolean = 
  UML!ProtocolStateMachine.allInstances()->forAll(psm |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ProtocolStateMachine def: protocol_transitions(): Boolean = 
  UML!ProtocolStateMachine.allInstances()->forAll(psm |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ProtocolTransition def: refers_to_operation(): Boolean = 
  UML!ProtocolTransition.allInstances()->forAll(pt |
    // We don't understand ocl expression IfExp
; 

helper context UML!ProtocolTransition def: associated_actions(): Boolean = 
  UML!ProtocolTransition.allInstances()->forAll(pt |
    name:
    self:
    type:self : StateMachines::ProtocolTransition[1]
    =	
    
; 

helper context UML!ProtocolTransition def: belongs_to_psm(): Boolean = 
  UML!ProtocolTransition.allInstances()->forAll(pt |
    name:
    self:
    type:self : StateMachines::ProtocolTransition[1]
    
; 

helper context UML!Pseudostate def: transitions_outgoing(): Boolean = 
  UML!Pseudostate.allInstances()->forAll(p |
    name:
    self:kind
    type:self : StateMachines::Pseudostate[1]
    =	
    
    implies	
    
; 

helper context UML!Pseudostate def: choice_vertex(): Boolean = 
  UML!Pseudostate.allInstances()->forAll(p |
    name:
    self:kind
    type:self : StateMachines::Pseudostate[1]
    =	
    
    implies	
    
; 

helper context UML!Pseudostate def: outgoing_from_initial(): Boolean = 
  UML!Pseudostate.allInstances()->forAll(p |
    name:
    self:kind
    type:self : StateMachines::Pseudostate[1]
    =	
    
    implies	
    
; 

helper context UML!Pseudostate def: join_vertex(): Boolean = 
  UML!Pseudostate.allInstances()->forAll(p |
    name:
    self:kind
    type:self : StateMachines::Pseudostate[1]
    =	
    
    implies	
    
; 

helper context UML!Pseudostate def: junction_vertex(): Boolean = 
  UML!Pseudostate.allInstances()->forAll(p |
    name:
    self:kind
    type:self : StateMachines::Pseudostate[1]
    =	
    
    implies	
    
; 

helper context UML!Pseudostate def: history_vertices(): Boolean = 
  UML!Pseudostate.allInstances()->forAll(p |
    name:
    self:kind
    type:self : StateMachines::Pseudostate[1]
    =	
    
    or	
    
    implies	
    
; 

helper context UML!Pseudostate def: initial_vertex(): Boolean = 
  UML!Pseudostate.allInstances()->forAll(p |
    name:
    self:kind
    type:self : StateMachines::Pseudostate[1]
    =	
    
    implies	
    
; 

helper context UML!Pseudostate def: fork_vertex(): Boolean = 
  UML!Pseudostate.allInstances()->forAll(p |
    name:
    self:kind
    type:self : StateMachines::Pseudostate[1]
    =	
    
    implies	
    
; 

helper context UML!Pseudostate def: transitions_incoming(): Boolean = 
  UML!Pseudostate.allInstances()->forAll(p |
    name:
    self:kind
    type:self : StateMachines::Pseudostate[1]
    =	
    
    implies	
    
; 

helper context UML!Region def: deep_history_vertex(): Boolean = 
  UML!Region.allInstances()->forAll(r |
    // We don't understand ocl expression IteratorExp
    size	
    
    <=	
    
; 

helper context UML!Region def: shallow_history_vertex(): Boolean = 
  UML!Region.allInstances()->forAll(r |
    // We don't understand ocl expression IteratorExp
    size	
    
    <=	
    
; 

helper context UML!Region def: owned(): Boolean = 
  UML!Region.allInstances()->forAll(r |
    name:
    self:
    type:self : StateMachines::Region[1]
    <>	
    
    implies	
    
    and	
    
; 

helper context UML!Region def: initial_vertex(): Boolean = 
  UML!Region.allInstances()->forAll(r |
    // We don't understand ocl expression IteratorExp
    size	
    
    <=	
    
; 

helper context UML!State def: entry_or_exit(): Boolean = 
  UML!State.allInstances()->forAll(s |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!State def: submachine_states(): Boolean = 
  UML!State.allInstances()->forAll(s |
    name:
    self:
    type:self : StateMachines::State[1]
    implies	
    
; 

helper context UML!State def: composite_states(): Boolean = 
  UML!State.allInstances()->forAll(s |
    name:
    self:
    type:self : StateMachines::State[1]
    notEmpty	
    
    implies	
    
; 

helper context UML!State def: destinations_or_sources_of_transitions(): Boolean = 
  UML!State.allInstances()->forAll(s |
    name:
    self:
    type:self : StateMachines::State[1]
    implies	
    
; 

helper context UML!State def: submachine_or_regions(): Boolean = 
  UML!State.allInstances()->forAll(s |
    name:
    self:
    type:self : StateMachines::State[1]
    implies	
    
; 

helper context UML!StateMachine def: connection_points(): Boolean = 
  UML!StateMachine.allInstances()->forAll(sm |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!StateMachine def: classifier_context(): Boolean = 
  UML!StateMachine.allInstances()->forAll(sm |
    name:
    self:
    type:self : StateMachines::StateMachine[1]
    <>	
    
    implies	
    
; 

helper context UML!StateMachine def: method(): Boolean = 
  UML!StateMachine.allInstances()->forAll(sm |
    name:
    self:
    type:self : StateMachines::StateMachine[1]
    <>	
    
    implies	
    
; 

helper context UML!StateMachine def: context_classifier(): Boolean = 
  UML!StateMachine.allInstances()->forAll(sm |
    name:
    self:
    type:self : StateMachines::StateMachine[1]
    <>	
    
    implies	
    
; 

helper context UML!Transition def: state_is_external(): Boolean = 
  UML!Transition.allInstances()->forAll(t |
    name:
    self:kind
    type:self : StateMachines::Transition[1]
    =	
    
    implies	
    
; 

helper context UML!Transition def: join_segment_guards(): Boolean = 
  UML!Transition.allInstances()->forAll(t |
    name:
    self:
    type:self : StateMachines::Transition[1]
    oclIsKindOf	
    
    and	
    
    implies	
    
; 

helper context UML!Transition def: state_is_internal(): Boolean = 
  UML!Transition.allInstances()->forAll(t |
    name:
    self:kind
    type:self : StateMachines::Transition[1]
    =	
    
    implies	
    
; 

helper context UML!Transition def: outgoing_pseudostates(): Boolean = 
  UML!Transition.allInstances()->forAll(t |
    name:
    self:
    type:self : StateMachines::Transition[1]
    oclIsKindOf	
    
    and	
    
    implies	
    
; 

helper context UML!Transition def: join_segment_state(): Boolean = 
  UML!Transition.allInstances()->forAll(t |
    name:
    self:
    type:self : StateMachines::Transition[1]
    oclIsKindOf	
    
    and	
    
    implies	
    
; 

helper context UML!Transition def: fork_segment_state(): Boolean = 
  UML!Transition.allInstances()->forAll(t |
    name:
    self:
    type:self : StateMachines::Transition[1]
    oclIsKindOf	
    
    and	
    
    implies	
    
; 

helper context UML!Transition def: state_is_local(): Boolean = 
  UML!Transition.allInstances()->forAll(t |
    name:
    self:kind
    type:self : StateMachines::Transition[1]
    =	
    
    implies	
    
; 

helper context UML!Transition def: initial_transition(): Boolean = 
  UML!Transition.allInstances()->forAll(t |
    name:
    self:
    type:self : StateMachines::Transition[1]
    oclIsKindOf	
    
    and	
    
    implies	
    
; 

helper context UML!Transition def: fork_segment_guards(): Boolean = 
  UML!Transition.allInstances()->forAll(t |
    name:
    self:
    type:self : StateMachines::Transition[1]
    oclIsKindOf	
    
    and	
    
    implies	
    
; 

helper context UML!Association def: specialized_end_number(): Boolean = 
  UML!Association.allInstances()->forAll(a |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Association def: specialized_end_types(): Boolean = 
  UML!Association.allInstances()->forAll(a |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Association def: binary_associations(): Boolean = 
  UML!Association.allInstances()->forAll(a |
    // We don't understand ocl expression IteratorExp
    implies	
    
; 

helper context UML!Association def: association_ends(): Boolean = 
  UML!Association.allInstances()->forAll(a |
    name:
    self:
    type:self : StructuredClassifiers::Association[1]
    size	
    
    >	
    
    implies	
    
; 

helper context UML!Association def: ends_must_be_typed(): Boolean = 
  UML!Association.allInstances()->forAll(a |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!AssociationClass def: cannot_be_defined(): Boolean = 
  UML!AssociationClass.allInstances()->forAll(ac |
    
    oclAsSet	
    
    excludes	
    
    and	
    
; 

helper context UML!AssociationClass def: disjoint_attributes_ends(): Boolean = 
  UML!AssociationClass.allInstances()->forAll(ac |
    name:
    self:
    type:self : StructuredClassifiers::AssociationClass[1]
    intersection	
    
    isEmpty	
    
; 

helper context UML!Class def: passive_class(): Boolean = 
  UML!Class.allInstances()->forAll(c |
    name:
    self:isActive
    type:self : StructuredClassifiers::Class[1]
    not	
    
    implies	
    
; 

helper context UML!CollaborationUse def: client_elements(): Boolean = 
  UML!CollaborationUse.allInstances()->forAll(cu |
    // We don't understand ocl expression IteratorExp
    and	
    
; 

helper context UML!CollaborationUse def: every_role(): Boolean = 
  UML!CollaborationUse.allInstances()->forAll(cu |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!CollaborationUse def: connectors(): Boolean = 
  UML!CollaborationUse.allInstances()->forAll(cu |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Component def: no_nested_classifiers(): Boolean = 
  UML!Component.allInstances()->forAll(c |
    name:
    self:
    type:self : StructuredClassifiers::Component[1]
    isEmpty	
    
; 

helper context UML!Component def: no_packaged_elements(): Boolean = 
  UML!Component.allInstances()->forAll(c |
    // We don't understand ocl expression OppositePropertyCallExp
    <>	
    
    implies	
    
; 

helper context UML!Connector def: types(): Boolean = 
  UML!Connector.allInstances()->forAll(c |
    name:
    self:
    type:self : StructuredClassifiers::Connector[1]
    <>	
    
    implies	
    
; 

helper context UML!Connector def: roles(): Boolean = 
  UML!Connector.allInstances()->forAll(c |
    // We don't understand ocl expression OppositePropertyCallExp
    <>	
    
    and	
    
; 

helper context UML!ConnectorEnd def: role_and_part_with_port(): Boolean = 
  UML!ConnectorEnd.allInstances()->forAll(ce |
    name:
    self:
    type:self : StructuredClassifiers::ConnectorEnd[1]
    oclAsSet	
    
    notEmpty	
    
    implies	
    
; 

helper context UML!ConnectorEnd def: part_with_port_empty(): Boolean = 
  UML!ConnectorEnd.allInstances()->forAll(ce |
    name:
    self:
    type:self : StructuredClassifiers::ConnectorEnd[1]
    oclIsKindOf	
    
    and	
    
    implies	
    
; 

helper context UML!ConnectorEnd def: multiplicity(): Boolean = 
  UML!ConnectorEnd.allInstances()->forAll(ce |
    
; 

helper context UML!ConnectorEnd def: self_part_with_port(): Boolean = 
  UML!ConnectorEnd.allInstances()->forAll(ce |
    name:
    self:
    type:self : StructuredClassifiers::ConnectorEnd[1]
    oclAsSet	
    
    notEmpty	
    
    implies	
    
; 

helper context UML!Port def: port_aggregation(): Boolean = 
  UML!Port.allInstances()->forAll(p |
    name:
    self:
    type:self : StructuredClassifiers::Port[1]
    =	
    
; 

helper context UML!Port def: default_value(): Boolean = 
  UML!Port.allInstances()->forAll(p |
    name:
    self:
    type:self : StructuredClassifiers::Port[1]
    oclIsKindOf	
    
    implies	
    
; 

helper context UML!Port def: encapsulated_owner(): Boolean = 
  UML!Port.allInstances()->forAll(p |
    name:
    self:
    type:self : StructuredClassifiers::Port[1]
    =	
    
; 

helper context UML!Actor def: associations(): Boolean = 
  UML!Actor.allInstances()->forAll(a |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!Actor def: must_have_name(): Boolean = 
  UML!Actor.allInstances()->forAll(a |
    name:
    self:
    type:self : UseCases::Actor[1]
    oclAsSet	
    
    notEmpty	
    
; 

helper context UML!Extend def: extension_points(): Boolean = 
  UML!Extend.allInstances()->forAll(e |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!ExtensionPoint def: must_have_name(): Boolean = 
  UML!ExtensionPoint.allInstances()->forAll(ep |
    name:
    self:
    type:self : UseCases::ExtensionPoint[1]
    oclAsSet	
    
    notEmpty	
    
; 

helper context UML!UseCase def: binary_associations(): Boolean = 
  UML!UseCase.allInstances()->forAll(uc |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!UseCase def: no_association_to_use_case(): Boolean = 
  UML!UseCase.allInstances()->forAll(uc |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!UseCase def: cannot_include_self(): Boolean = 
  UML!UseCase.allInstances()->forAll(uc |
    allIncludedUseCases	
    
    includes	
    
    not	
    
; 

helper context UML!UseCase def: must_have_name(): Boolean = 
  UML!UseCase.allInstances()->forAll(uc |
    name:
    self:
    type:self : UseCases::UseCase[1]
    oclAsSet	
    
    notEmpty	
    
; 

helper context UML!Duration def: no_expr_requires_observation(): Boolean = 
  UML!Duration.allInstances()->forAll(d |
    name:
    self:
    type:self : Values::Duration[1]
    =	
    
    implies	
    
; 

helper context UML!DurationConstraint def: first_event_multiplicity(): Boolean = 
  UML!DurationConstraint.allInstances()->forAll(dc |
    // We don't understand ocl expression IfExp
; 

helper context UML!DurationConstraint def: has_one_or_two_constrainedElements(): Boolean = 
  UML!DurationConstraint.allInstances()->forAll(dc |
    name:
    self:
    type:self : Values::DurationConstraint[1]
    size	
    
    =	
    
    or	
    
; 

helper context UML!DurationObservation def: first_event_multiplicity(): Boolean = 
  UML!DurationObservation.allInstances()->forAll(do |
    // We don't understand ocl expression IfExp
; 

helper context UML!OpaqueExpression def: language_body_size(): Boolean = 
  UML!OpaqueExpression.allInstances()->forAll(oe |
    name:
    self:
    type:self : Values::OpaqueExpression[1]
    notEmpty	
    
    implies	
    
; 

helper context UML!OpaqueExpression def: one_return_result_parameter(): Boolean = 
  UML!OpaqueExpression.allInstances()->forAll(oe |
    name:
    self:
    type:self : Values::OpaqueExpression[1]
    <>	
    
    implies	
    
; 

helper context UML!OpaqueExpression def: only_return_result_parameters(): Boolean = 
  UML!OpaqueExpression.allInstances()->forAll(oe |
    name:
    self:
    type:self : Values::OpaqueExpression[1]
    <>	
    
    implies	
    
; 

helper context UML!StringExpression def: operands(): Boolean = 
  UML!StringExpression.allInstances()->forAll(se |
    // We don't understand ocl expression IteratorExp
; 

helper context UML!StringExpression def: subexpressions(): Boolean = 
  UML!StringExpression.allInstances()->forAll(se |
    // We don't understand ocl expression IfExp
; 

helper context UML!TimeConstraint def: has_one_constrainedElement(): Boolean = 
  UML!TimeConstraint.allInstances()->forAll(tc |
    name:
    self:
    type:self : Values::TimeConstraint[1]
    size	
    
    =	
    
; 

helper context UML!TimeExpression def: no_expr_requires_observation(): Boolean = 
  UML!TimeExpression.allInstances()->forAll(te |
    name:
    self:
    type:self : Values::TimeExpression[1]
    =	
    
    implies	
    
; 

